#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SnitzData
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ForumT")]
	public partial class LookupsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertForumModerator(ForumModerator instance);
    partial void UpdateForumModerator(ForumModerator instance);
    partial void DeleteForumModerator(ForumModerator instance);
    partial void InsertModerator(Moderator instance);
    partial void UpdateModerator(Moderator instance);
    partial void DeleteModerator(Moderator instance);
    partial void InsertForumSubscriptions(ForumSubscriptions instance);
    partial void UpdateForumSubscriptions(ForumSubscriptions instance);
    partial void DeleteForumSubscriptions(ForumSubscriptions instance);
    #endregion
		
		public LookupsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LookupsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LookupsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LookupsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ForumModerator> ForumModerators
		{
			get
			{
				return this.GetTable<ForumModerator>();
			}
		}
		
		public System.Data.Linq.Table<Moderator> Moderators
		{
			get
			{
				return this.GetTable<Moderator>();
			}
		}
		
		public System.Data.Linq.Table<ForumSubscriptions> ForumSubscriptions
		{
			get
			{
				return this.GetTable<ForumSubscriptions>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="FORUM_MODERATOR")]
	public partial class ForumModerator : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _ForumId;
		
		private int _ModeratorId;
		
		private System.Nullable<short> _ModType;
		
		private EntityRef<Moderator> _Moderators;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnForumIdChanging(System.Nullable<int> value);
    partial void OnForumIdChanged();
    partial void OnModeratorIdChanging(int value);
    partial void OnModeratorIdChanged();
    partial void OnModTypeChanging(System.Nullable<short> value);
    partial void OnModTypeChanged();
    #endregion
		
		public ForumModerator()
		{
			this._Moderators = default(EntityRef<Moderator>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="MOD_ID", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="FORUM_ID", Storage="_ForumId", DbType="Int")]
		public System.Nullable<int> ForumId
		{
			get
			{
				return this._ForumId;
			}
			set
			{
				if ((this._ForumId != value))
				{
					this.OnForumIdChanging(value);
					this.SendPropertyChanging();
					this._ForumId = value;
					this.SendPropertyChanged("ForumId");
					this.OnForumIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="MEMBER_ID", Storage="_ModeratorId", DbType="Int")]
		public int ModeratorId
		{
			get
			{
				return this._ModeratorId;
			}
			set
			{
				if ((this._ModeratorId != value))
				{
					this.OnModeratorIdChanging(value);
					this.SendPropertyChanging();
					this._ModeratorId = value;
					this.SendPropertyChanged("ModeratorId");
					this.OnModeratorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="MOD_TYPE", Storage="_ModType", DbType="SmallInt")]
		public System.Nullable<short> ModType
		{
			get
			{
				return this._ModType;
			}
			set
			{
				if ((this._ModType != value))
				{
					this.OnModTypeChanging(value);
					this.SendPropertyChanging();
					this._ModType = value;
					this.SendPropertyChanged("ModType");
					this.OnModTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ForumModerator_Moderator", Storage="_Moderators", ThisKey="ModeratorId", OtherKey="ModeratorId", IsUnique=true, IsForeignKey=false)]
		public Moderator Moderators
		{
			get
			{
				return this._Moderators.Entity;
			}
			set
			{
				Moderator previousValue = this._Moderators.Entity;
				if (((previousValue != value) 
							|| (this._Moderators.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Moderators.Entity = null;
						previousValue.ForumModerator = null;
					}
					this._Moderators.Entity = value;
					if ((value != null))
					{
						value.ForumModerator = this;
					}
					this.SendPropertyChanged("Moderators");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="FORUM_MEMBERS")]
	public partial class Moderator : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ModeratorId;
		
		private System.Nullable<short> _Status;
		
		private string _Name;
		
		private string _M_USERNAME;
		
		private string _M_PASSWORD;
		
		private string _M_EMAIL;
		
		private System.Nullable<short> _M_LEVEL;
		
		private string _M_TITLE;
		
		private EntityRef<ForumModerator> _ForumModerator;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnModeratorIdChanging(int value);
    partial void OnModeratorIdChanged();
    partial void OnStatusChanging(System.Nullable<short> value);
    partial void OnStatusChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnM_USERNAMEChanging(string value);
    partial void OnM_USERNAMEChanged();
    partial void OnM_PASSWORDChanging(string value);
    partial void OnM_PASSWORDChanged();
    partial void OnM_EMAILChanging(string value);
    partial void OnM_EMAILChanged();
    partial void OnM_LEVELChanging(System.Nullable<short> value);
    partial void OnM_LEVELChanged();
    partial void OnM_TITLEChanging(string value);
    partial void OnM_TITLEChanged();
    #endregion
		
		public Moderator()
		{
			this._ForumModerator = default(EntityRef<ForumModerator>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="MEMBER_ID", Storage="_ModeratorId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ModeratorId
		{
			get
			{
				return this._ModeratorId;
			}
			set
			{
				if ((this._ModeratorId != value))
				{
					this.OnModeratorIdChanging(value);
					this.SendPropertyChanging();
					this._ModeratorId = value;
					this.SendPropertyChanged("ModeratorId");
					this.OnModeratorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="M_STATUS", Storage="_Status", DbType="SmallInt")]
		public System.Nullable<short> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="M_NAME", Storage="_Name", DbType="NVarChar(75) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_M_USERNAME", DbType="NVarChar(150)")]
		public string M_USERNAME
		{
			get
			{
				return this._M_USERNAME;
			}
			set
			{
				if ((this._M_USERNAME != value))
				{
					this.OnM_USERNAMEChanging(value);
					this.SendPropertyChanging();
					this._M_USERNAME = value;
					this.SendPropertyChanged("M_USERNAME");
					this.OnM_USERNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_M_PASSWORD", DbType="NVarChar(65) NOT NULL", CanBeNull=false)]
		public string M_PASSWORD
		{
			get
			{
				return this._M_PASSWORD;
			}
			set
			{
				if ((this._M_PASSWORD != value))
				{
					this.OnM_PASSWORDChanging(value);
					this.SendPropertyChanging();
					this._M_PASSWORD = value;
					this.SendPropertyChanged("M_PASSWORD");
					this.OnM_PASSWORDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_M_EMAIL", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string M_EMAIL
		{
			get
			{
				return this._M_EMAIL;
			}
			set
			{
				if ((this._M_EMAIL != value))
				{
					this.OnM_EMAILChanging(value);
					this.SendPropertyChanging();
					this._M_EMAIL = value;
					this.SendPropertyChanged("M_EMAIL");
					this.OnM_EMAILChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_M_LEVEL", DbType="SmallInt")]
		public System.Nullable<short> M_LEVEL
		{
			get
			{
				return this._M_LEVEL;
			}
			set
			{
				if ((this._M_LEVEL != value))
				{
					this.OnM_LEVELChanging(value);
					this.SendPropertyChanging();
					this._M_LEVEL = value;
					this.SendPropertyChanged("M_LEVEL");
					this.OnM_LEVELChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_M_TITLE", DbType="NVarChar(50)")]
		public string M_TITLE
		{
			get
			{
				return this._M_TITLE;
			}
			set
			{
				if ((this._M_TITLE != value))
				{
					this.OnM_TITLEChanging(value);
					this.SendPropertyChanging();
					this._M_TITLE = value;
					this.SendPropertyChanged("M_TITLE");
					this.OnM_TITLEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ForumModerator_Moderator", Storage="_ForumModerator", ThisKey="ModeratorId", OtherKey="ModeratorId", IsForeignKey=true)]
		public ForumModerator ForumModerator
		{
			get
			{
				return this._ForumModerator.Entity;
			}
			set
			{
				ForumModerator previousValue = this._ForumModerator.Entity;
				if (((previousValue != value) 
							|| (this._ForumModerator.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ForumModerator.Entity = null;
						previousValue.Moderators = null;
					}
					this._ForumModerator.Entity = value;
					if ((value != null))
					{
						value.Moderators = this;
						this._ModeratorId = value.ModeratorId;
					}
					else
					{
						this._ModeratorId = default(int);
					}
					this.SendPropertyChanged("ForumModerator");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="FORUM_SUBSCRIPTIONS")]
	public partial class ForumSubscriptions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _MemberId;
		
		private int _CategoryId;
		
		private int _TopicId;
		
		private int _ForumId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMemberIdChanging(int value);
    partial void OnMemberIdChanged();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnTopicIdChanging(int value);
    partial void OnTopicIdChanged();
    partial void OnForumIdChanging(int value);
    partial void OnForumIdChanged();
    #endregion
		
		public ForumSubscriptions()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="SUBSCRIPTION_ID", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="MEMBER_ID", Storage="_MemberId", DbType="Int NOT NULL")]
		public int MemberId
		{
			get
			{
				return this._MemberId;
			}
			set
			{
				if ((this._MemberId != value))
				{
					this.OnMemberIdChanging(value);
					this.SendPropertyChanging();
					this._MemberId = value;
					this.SendPropertyChanged("MemberId");
					this.OnMemberIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="CAT_ID", Storage="_CategoryId", DbType="Int NOT NULL")]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="TOPIC_ID", Storage="_TopicId", DbType="Int NOT NULL")]
		public int TopicId
		{
			get
			{
				return this._TopicId;
			}
			set
			{
				if ((this._TopicId != value))
				{
					this.OnTopicIdChanging(value);
					this.SendPropertyChanging();
					this._TopicId = value;
					this.SendPropertyChanged("TopicId");
					this.OnTopicIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="FORUM_ID", Storage="_ForumId", DbType="Int NOT NULL")]
		public int ForumId
		{
			get
			{
				return this._ForumId;
			}
			set
			{
				if ((this._ForumId != value))
				{
					this.OnForumIdChanging(value);
					this.SendPropertyChanging();
					this._ForumId = value;
					this.SendPropertyChanged("ForumId");
					this.OnForumIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
