function taginfo_t(e, t) { this.bbtag = e; this.etag = t } function isValidTag(e) { if (!e || !e.length) return false; return tagname_re.test(e) } function textToHtmlCB(e, t, n, r, i, s, o) { if (t && t.length) { if (!crlf2br) return e; switch (t) { case "\r": return ""; case "\n": return "<br/>" } } if (isValidTag(n)) { if (noparse) { return e } if (opentags.length && opentags[opentags.length - 1].bbtag == "url" && urlstart >= 0) return "[" + n + "]"; switch (n) { case "code": opentags.push(new taginfo_t(n, "</code></pre>")); crlf2br = false; return "<pre><code>"; case "video": opentags.push(new taginfo_t(n, "</iframe></body>")); if (r.length) r = r.replace(/"/ig, ""); return '<iframe src="http://www.youtube.com/embed/' + r + '">'; case "pre": opentags.push(new taginfo_t(n, "</pre>")); crlf2br = false; return "<pre>"; case "list": if (!r || !number_re.test(r)) { opentags.push(new taginfo_t(n, "</ul>")); crlf2br = false; return "<ul>" } else { opentags.push(new taginfo_t(n, "</ol>")); crlf2br = false; return "<ol>" }; case "*": opentags.push(new taginfo_t(n, "</li>")); crlf2br = false; return "<li>"; case "color": case "colour": if (!r || !color_re.test(r)) r = "inherit"; opentags.push(new taginfo_t(n, "</span>")); return '<span style="color: ' + r + '">'; case "red": case "green": if (!n || !color_re.test(n)) r = "inherit"; else { r = n } opentags.push(new taginfo_t(n, "</span>")); return '<span style="color: ' + r + '">'; case "size": if (!r || !number_re.test(r)) r = "1"; opentags.push(new taginfo_t(n, "</span>")); return '<span style="font-size: ' + Math.min(Math.max(r * .5, .85), 3) + 'em">'; case "s": opentags.push(new taginfo_t(n, "</span>")); return '<span style="text-decoration: line-through">'; case "ltr": case "rtl": opentags.push(new taginfo_t(n, "</span>")); return '<span style="direction: ' + n + '">'; case "left": case "right": opentags.push(new taginfo_t(n, "</span>")); return '<span style="float:' + n + ';">'; case "noparse": noparse = true; return ""; case "img": var u = '"/>'; opentags.push(new taginfo_t(n, u)); var a = '<img style="width:100%;" src="'; if (r) a = '<img style="width:100%;float:' + r + '" src="'; return a; case "url": opentags.push(new taginfo_t(n, "</a>")); if (r) r = r.replace(/\"/g, ""); if (r && uri_re.test(r)) { urlstart = -1; return '<a href="' + r + '" class="postlink">' } urlstart = e.length + s; return '<a class="postlink" href="'; case "file": opentags.push(new taginfo_t(n, '"><img src="/style/images/attach.png"/></a>')); return '<a title="open attachment" href="/download.ashx?file='; case "q": case "quote": if (r && r.length) r = r.replace(/\"/g, ""); opentags.push(new taginfo_t(n, "</blockquote>")); return r && r.length && uri_re.test(r) ? '<blockquote class="quoteMessage" cite="' + r + '">' : "<blockquote>"; case "table": opentags.push(new taginfo_t(n, "</table>")); if (!r) { return "<table>" } else { return "<table " + r + ">" }; case "br": case "hr": return "<" + n + "/>"; default: opentags.push(new taginfo_t(n, "</" + n + ">")); return "<" + n + ">" } } if (isValidTag(i)) { if (noparse) { if (i == "noparse") { noparse = false; return "" } return "[/" + i + "]" } mx = i.toString().replace(/size(?:=[0-9]{1,3})?/ig, "size"); mx = mx.replace(/list(?:=[0-9a-z,]{1,9})/ig, "list"); if (!opentags.length || opentags[opentags.length - 1].bbtag != mx) return '<span style="color: red">[/' + i + "]</span>"; if (i == "url") { if (urlstart > 0) return '">' + o.substr(urlstart, s - urlstart) + opentags.pop().etag; return opentags.pop().etag } else if (i == "code" || i == "pre") crlf2br = true; return opentags.pop().etag } return e } function parseBBCode(e) { var t, n, r; crlf2br = true; if (opentags == null || opentags.length) opentags = new Array(0); t = e.replace(postfmt_re, textToHtmlCB); if (noparse) noparse = false; if (opentags.length) { n = new String; if (opentags[opentags.length - 1].bbtag == "url") { opentags.pop(); n += '">' + e.substr(urlstart, e.length - urlstart) + "</a>" } while (opentags.length) n += opentags.pop().etag } return n ? t + n : t } var opentags; var crlf2br = true; var noparse = false; var urlstart = -1; var tagname_re = /^\/?(?:b|i|u|pre|samp|code|colou?r|red|green|size(?:=[0-9]{1,3})?|noparse|url|img(?:=[a-z]{4,})?|video|s|q|quote|ltr|rtl|br|hr|left|right|file|list(?:=[a-z0-9]{1,3})?|[\*]|table|tr|td|th)$/; var color_re = /^(:?black|silver|gray|white|maroon|red|purple|fuchsia|green|lime|olive|yellow|navy|blue|teal|aqua|#(?:[0-9a-f]{3})?[0-9a-f]{3})$/i; var number_re = /^[\\.0-9,]{1,8}$/i; var uri_re = /^[-;\/\?:@&=\+\$,_\.!~\*'\(\)%0-9a-z]{1,512}$/i; var postfmt_re = /([\r\n])|(?:\[([a-z\*]{1,16})(?:[= ]([^\x00-\x1F'\(\)<>\[\]]{1,256}))?\])|(?:\[\/([a-z\*]{1,16}|[a-z]{1,16}=[a-z0-9]{0,3})\])/ig