function miuSpellchecker(e, t) { if ($(e.textarea).hasClass("spellcheck-editor")) { $(e.textarea).spellchecker("remove") } else { $(e.textarea).spellchecker({ engine: "google", url: "~/JQuerySpellCheckerHandler.ashx", wordlist: { action: "after", element: ".markItUpFooter" }, lang: t, suggestBoxPosition: "above" }).spellchecker("check", function (t) { if (t) { $(e.textarea).spellchecker("remove"); alert("There are no incorrectly spelt words.") } }) } } (function (e) { e.fn.extend({ spellchecker: function (n, r) { return this.each(function () { if (e(this).data("spellchecker") && e(this).data("spellchecker")[n]) { e(this).data("spellchecker")[n](r) } else { e(this).data("spellchecker", new t(this, n && n.constructor === Object && n || null)); n && n.constructor == String && e(this).data("spellchecker")[n](r) } }) } }); var t = function (t, n) { this.options = e.extend({ url: "checkspelling.php", lang: "en", engine: "pspell", addToDictionary: false, wordlist: { action: "after", element: t }, suggestBoxPosition: "below", innerDocument: true }, n || {}); this.$domObj = e(t); this.elements = {}; this.init() }; t.prototype = { init: function () { var t = this; this.createElements(); this.$domObj.addClass("spellcheck-container"); e(document).bind("click", function (n) { !e(n.target).hasClass("spellcheck-word-highlight") && !e(n.target).parents().filter("#spellcheck-suggestbox").length && t.hideBox() }) }, check: function (t) { var n = this, r = this.$domObj.get(0).nodeName, i = "<[^>]+>", s = "^[^a-zA-Z\\u00A1-\\uFFFF]|[^a-zA-Z\\u00A1-\\uFFFF]+[^a-zA-Z\\u00A1-\\uFFFF]|[^a-zA-Z\\u00A1-\\uFFFF]$|\\n|\\t|\\s{2,}"; if (r == "TEXTAREA" || r == "INPUT") { this.type = "textarea"; var o = e.trim(this.$domObj.val().replace(new RegExp(i, "g"), "").replace(new RegExp(s, "g"), " ")) } else { this.type = "html"; var o = e.trim(this.$domObj.text().replace(new RegExp(s, "g"), " ")) } this.postJson(this.options.url, { text: encodeURIComponent(o).replace(/%20/g, "+") }, function (e) { n.type == "html" && n.options.innerDocument ? n.highlightWords(e, t) : n.buildBadwordsBox(e, t) }) }, highlightWords: function (t, n) { if (!t.length) { n(true); return } var r = this, i = this.$domObj.html(); e.each(t, function (e, t) { i = i.replace(new RegExp("([^a-zA-Z\\u00A1-\\uFFFF])(" + t + ")([^a-zA-Z\\u00A1-\\uFFFF])", "g"), '$1<span class="spellcheck-word-highlight">$2</span>$3') }); this.$domObj.html(i).find(".spellcheck-word-highlight").click(function () { r.suggest(this) }); n && n() }, buildBadwordsBox: function (t, n) { if (!t.length) { n(true); return } var r = this, i = []; if (!e("#spellcheck-badwords").length) { e(this.options.wordlist.element)[this.options.wordlist.action](this.elements.$badwords) } else { this.elements.$badwords = e("#spellcheck-badwords") } this.elements.$badwords.empty(); e.each(t, function (t, n) { if (e.inArray(n, i) === -1) { e('<span class="spellcheck-word-highlight">' + n + "</span>").click(function () { r.suggest(this) }).appendTo(r.elements.$badwords).after('<span class="spellcheck-sep">,</span> '); i.push(n) } }); e(".spellcheck-sep:last", r.elements.$badwords).addClass("spellcheck-sep-last"); n && n() }, suggest: function (t) { var n = this, r = e(t), i = r.offset(); this.$curWord = r; if (this.options.innerDocument) { this.elements.$suggestBox = this.elements.$body.find("#spellcheck-suggestbox"); this.elements.$suggestWords = this.elements.$body.find("#spellcheck-suggestbox-words"); this.elements.$suggestFoot = this.elements.$body.find("#spellcheck-suggestbox-foot") } this.elements.$suggestFoot.hide(); this.elements.$suggestBox.stop().hide().css({ opacity: 1, width: "auto", left: i.left + "px", top: this.options.suggestBoxPosition == "above" ? i.top - (r.outerHeight() + 10) + "px" : i.top + r.outerHeight() + "px" }).fadeIn(200); this.elements.$suggestWords.html("<em>Loading..</em>"); this.postJson(this.options.url, { suggest: encodeURIComponent(e.trim(r.text())) }, function (e) { n.buildSuggestBox(e, i) }) }, buildSuggestBox: function (t, n) { var r = this, i = this.$curWord; this.elements.$suggestWords.empty(); for (var s = 0; s < (t.length < 5 ? t.length : 5) ; s++) { this.elements.$suggestWords.append(e('<a href="#">' + t[s] + "</a>").addClass(!s ? "first" : "").click(function () { return false }).mousedown(function (e) { e.preventDefault(); r.replace(this.innerHTML); r.hideBox() })) } !s && this.elements.$suggestWords.append("<em>(no suggestions)</em>"); var o = window.innerHeight ? window.innerHeight : e(window).height(); this.elements.$suggestFoot.show(); r.elements.$suggestBox.css({ top: this.options.suggestBoxPosition == "above" || n.top + i.outerHeight() + this.elements.$suggestBox.outerHeight() > o + 10 ? n.top - (this.elements.$suggestBox.height() + 5) + "px" : n.top + i.outerHeight() + "px", width: "auto", left: this.elements.$suggestBox.outerWidth() + n.left > e("body").width() ? n.left - this.elements.$suggestBox.width() + i.outerWidth() + "px" : n.left + "px" }) }, hideBox: function (e) { this.elements.$suggestBox.fadeOut(250, function () { e && e() }) }, replace: function (e) { switch (this.type) { case "textarea": this.replaceTextbox(e); break; case "html": this.replaceHtml(e); break } }, replaceWord: function (e, t) { return e.replace(new RegExp("([^a-zA-Z\\u00A1-\\uFFFF]?)(" + this.$curWord.text() + ")([^a-zA-Z\\u00A1-\\uFFFF]?)", "g"), "$1" + t + "$3").replace(new RegExp("^(" + this.$curWord.text() + ")([^a-zA-Z\\u00A1-\\uFFFF])", "g"), t + "$2").replace(new RegExp("([^a-zA-Z\\u00A1-\\uFFFF])(" + this.$curWord.text() + ")$", "g"), "$1" + t) }, replaceTextbox: function (e) { this.removeBadword(this.$curWord); this.$domObj.val(this.replaceWord(this.$domObj.val(), e)) }, replaceHtml: function (t) { var n = this.$domObj.find(".spellcheck-word-highlight:contains(" + this.$curWord.text() + ")"); if (n.length) { n.after(t).remove() } else { e(this.$domObj).html(this.replaceWord(e(this.$domObj).html(), t)); this.removeBadword(this.$curWord) } }, ignore: function () { if (this.type == "textarea") { this.removeBadword(this.$curWord) } else { this.$curWord.after(this.$curWord.html()).remove() } }, ignoreAll: function () { var t = this; if (this.type == "textarea") { this.removeBadword(this.$curWord) } else { e(".spellcheck-word-highlight", this.$domObj).each(function () { (new RegExp(t.$curWord.text(), "i")).test(this.innerHTML) && e(this).after(this.innerHTML).remove() }) } }, removeBadword: function (t) { t.next().hasClass("spellcheck-sep") && t.next().remove(); t.remove(); if (!e(".spellcheck-sep", this.elements.$badwords).length) { this.remove() } else { e(".spellcheck-sep:last", this.elements.$badwords).addClass("spellcheck-sep-last") } }, addToDictionary: function () { var e = this; this.hideBox(function () { confirm('Are you sure you want to add the word "' + e.$curWord.text() + '" to the dictionary?') && e.postJson(e.options.url, { addtodictionary: e.$curWord.text() }, function () { e.ignoreAll(); e.check() }) }) }, remove: function (t) { t = t || true; this.elements.$body.find(".spellcheck-word-highlight").each(function () { e(this).after(this.innerHTML).remove() }); this.elements.$body.find("#spellcheck-badwords, #spellcheck-suggestbox-words, #spellcheck-suggestbox-foot, #spellcheck-suggestbox, #spellcheck-focus-helper").remove(); e(this.domObj).removeClass("spellcheck-container"); t && e(this.domObj).data("spellchecker", null) }, postJson: function (t, n, r) { var i = e.ajax({ type: "POST", url: t, data: e.extend(n, { engine: this.options.engine, lang: this.options.lang }), dataType: "json", cache: false, error: function (e, t, n) { alert("Sorry, there was an error processing the request.") }, success: function (e) { r && r(e) } }); return i }, createElements: function () { var t = this; this.elements.$body = this.options.innerDocument ? this.$domObj.parents().filter("html:first").find("body") : e("body"); this.remove(false); this.elements.$suggestWords = e('<div id ="spellcheck-suggestbox-words"></div>'); this.elements.$ignoreWord = e('<a href="#">Ignore Word</a>').click(function (e) { e.preventDefault(); t.ignore(); t.hideBox() }); this.elements.$ignoreAllWords = e('<a href="#">Ignore all</a>').click(function (e) { e.preventDefault(); t.ignoreAll(); t.hideBox() }); this.elements.$ignoreWordsForever = e('<a href="#" title="ignore word forever (add to dictionary)">Ignore forever</a>').click(function (e) { e.preventDefault(); t.addToDictionary(); t.hideBox() }); this.elements.$suggestFoot = e('<div id="spellcheck-suggestbox-foot"></div>').append(this.elements.$ignoreWord).append(this.elements.$ignoreAllWords).append(this.options.engine == "pspell" && t.options.addToDictionary ? this.elements.$ignoreWordsForever : false); this.elements.$badwords = e('<div id="spellcheck-badwords"></div>'); this.elements.$suggestBox = e('<div id="spellcheck-suggestbox"></div>').append(this.elements.$suggestWords).append(this.elements.$suggestFoot).prependTo(this.elements.$body) } } })(jQuery); (function ($) { $.fn.markItUp = function (settings, extraSettings) { var options, ctrlKey, shiftKey, altKey; ctrlKey = shiftKey = altKey = false; options = { id: "", nameSpace: "", root: "", previewInWindow: "", previewAutoRefresh: true, previewPosition: "after", previewTemplatePath: "~/templates/preview.html", previewParser: false, previewParserPath: "", previewParserVar: "data", resizeHandle: true, beforeInsert: "", afterInsert: "", onEnter: {}, onShiftEnter: {}, onCtrlEnter: {}, onTab: {}, markupSet: [{}] }; $.extend(options, settings, extraSettings); if (!options.root) { $("script").each(function (e, t) { miuScript = $(t).get(0).src.match(/(.*)jquery\.markitup(\.pack)?\.js$/); if (miuScript !== null) { options.root = miuScript[1] } }) } return this.each(function () { function localize(e, t) { if (t) { return e.replace(/("|')~\//g, "$1" + options.root) } return e.replace(/^~\//, options.root) } function init() { id = ""; nameSpace = ""; if (options.id) { id = 'id="' + options.id + '"' } else if ($$.attr("id")) { id = 'id="markItUp' + $$.attr("id").substr(0, 1).toUpperCase() + $$.attr("id").substr(1) + '"' } if (options.nameSpace) { nameSpace = 'class="' + options.nameSpace + '"' } $$.wrap("<div " + nameSpace + "></div>"); $$.wrap("<div " + id + ' class="markItUp"></div>'); $$.wrap('<div class="markItUpContainer"></div>'); $$.addClass("markItUpEditor"); header = $('<div class="markItUpHeader"></div>').insertBefore($$); $(dropMenus(options.markupSet)).appendTo(header); footer = $('<div class="markItUpFooter"></div>').insertAfter($$); if (options.resizeHandle === true && $.browser.safari !== true) { resizeHandle = $('<div class="markItUpResizeHandle"></div>').insertAfter($$).bind("mousedown", function (e) { var t = $$.height(), n = e.clientY, r, i; r = function (e) { $$.css("height", Math.max(20, e.clientY + t - n) + "px"); return false }; i = function (e) { $("html").unbind("mousemove", r).unbind("mouseup", i); return false }; $("html").bind("mousemove", r).bind("mouseup", i) }); footer.append(resizeHandle) } $$.keydown(keyPressed).keyup(keyPressed); $$.bind("insertion", function (e, t) { if (t.target !== false) { get() } if (textarea === $.markItUp.focused) { markup(t) } }); $$.focus(function () { $.markItUp.focused = this }) } function dropMenus(markupSet) { var ul = $("<ul></ul>"), i = 0; $("li:hover > ul", ul).css("display", "block"); $.each(markupSet, function () { var button = this, t = "", title, li, j; title = button.key ? (button.name || "") + " [Ctrl+" + button.key + "]" : button.name || ""; key = button.key ? 'accesskey="' + button.key + '"' : ""; if (button.separator) { li = $('<li class="markItUpSeparator">' + (button.separator || "") + "</li>").appendTo(ul) } else { i++; for (j = levels.length - 1; j >= 0; j--) { t += levels[j] + "-" } li = $('<li class="markItUpButton markItUpButton' + t + i + " " + (button.className || "") + '"><a href="" ' + key + ' title="' + title + '">' + (button.name || "") + "</a></li>").bind("contextmenu", function () { return false }).click(function () { return false }).bind("focusin", function () { $$.focus() }).mouseup(function () { if (button.call) { eval(button.call)() } setTimeout(function () { markup(button) }, 1); return false }).hover(function () { $("> ul", this).show(); $(document).one("click", function () { $("ul ul", header).hide() }) }, function () { $("> ul", this).hide() }).appendTo(ul); if (button.dropMenu) { levels.push(i); $(li).addClass("markItUpDropMenu").append(dropMenus(button.dropMenu)) } } }); levels.pop(); return ul } function magicMarkups(e) { if (e) { e = e.toString(); e = e.replace(/\(\!\(([\s\S]*?)\)\!\)/g, function (e, t) { var n = t.split("|!|"); if (altKey === true) { return n[1] !== undefined ? n[1] : n[0] } else { return n[1] === undefined ? "" : n[0] } }); e = e.replace(/\[\!\[([\s\S]*?)\]\!\]/g, function (e, t) { var n = t.split(":!:"); if (abort === true) { return false } value = prompt(n[0], n[1] ? n[1] : ""); if (value === null) { abort = true } return value }); return e } return "" } function prepare(e) { if ($.isFunction(e)) { e = e(hash) } return magicMarkups(e) } function build(e) { var t = prepare(clicked.openWith); var n = prepare(clicked.placeHolder); var r = prepare(clicked.replaceWith); var i = prepare(clicked.closeWith); var s = prepare(clicked.openBlockWith); var o = prepare(clicked.closeBlockWith); var u = clicked.multiline; if (r !== "") { block = t + r + i } else if (selection === "" && n !== "") { block = t + n + i } else { e = e || selection; var a = selection.split(/\r?\n/), f = []; for (var l = 0; l < a.length; l++) { line = a[l]; var c; if (c = line.match(/ *$/)) { f.push(t + line.replace(/ *$/g, "") + i + c) } else { f.push(t + line + i) } } block = f.join("\n") } block = s + block + o; return { block: block, openWith: t, replaceWith: r, placeHolder: n, closeWith: i } } function markup(e) { var t, n, r, i; hash = clicked = e; get(); $.extend(hash, { line: "", root: options.root, textarea: textarea, selection: selection || "", caretPosition: caretPosition, ctrlKey: ctrlKey, shiftKey: shiftKey, altKey: altKey }); prepare(options.beforeInsert); prepare(clicked.beforeInsert); if (ctrlKey === true && shiftKey === true || e.multiline === true) { prepare(clicked.beforeMultiInsert) } $.extend(hash, { line: 1 }); if (ctrlKey === true && shiftKey === true) { lines = selection.split(/\r?\n/); for (n = 0, r = lines.length, i = 0; i < r; i++) { if ($.trim(lines[i]) !== "") { $.extend(hash, { line: ++n, selection: lines[i] }); lines[i] = build(lines[i]).block } else { lines[i] = "" } } string = { block: lines.join("\n") }; start = caretPosition; t = string.block.length + ($.browser.opera ? r - 1 : 0) } else if (ctrlKey === true) { string = build(selection); start = caretPosition + string.openWith.length; t = string.block.length - string.openWith.length - string.closeWith.length; t = t - (string.block.match(/ $/) ? 1 : 0); t -= fixIeBug(string.block) } else if (shiftKey === true) { string = build(selection); start = caretPosition; t = string.block.length; t -= fixIeBug(string.block) } else { string = build(selection); start = caretPosition + string.block.length; t = 0; start -= fixIeBug(string.block) } if (selection === "" && string.replaceWith === "") { caretOffset += fixOperaBug(string.block); start = caretPosition + string.openWith.length; t = string.block.length - string.openWith.length - string.closeWith.length; caretOffset = $$.val().substring(caretPosition, $$.val().length).length; caretOffset -= fixOperaBug($$.val().substring(0, caretPosition)) } $.extend(hash, { caretPosition: caretPosition, scrollPosition: scrollPosition }); if (string.block !== selection && abort === false) { insert(string.block); set(start, t) } else { caretOffset = -1 } get(); $.extend(hash, { line: "", selection: selection }); if (ctrlKey === true && shiftKey === true || e.multiline === true) { prepare(clicked.afterMultiInsert) } prepare(clicked.afterInsert); prepare(options.afterInsert); if (previewWindow && options.previewAutoRefresh) { refreshPreview() } shiftKey = altKey = ctrlKey = abort = false } function fixOperaBug(e) { if ($.browser.opera) { return e.length - e.replace(/\n*/g, "").length } return 0 } function fixIeBug(e) { if ($.browser.msie) { return e.length - e.replace(/\r*/g, "").length } return 0 } function insert(e) { if (document.selection) { var t = document.selection.createRange(); t.text = e } else { textarea.value = textarea.value.substring(0, caretPosition) + e + textarea.value.substring(caretPosition + selection.length, textarea.value.length) } } function set(e, t) { if (textarea.createTextRange) { if ($.browser.opera && $.browser.version >= 9.5 && t == 0) { return false } range = textarea.createTextRange(); range.collapse(true); range.moveStart("character", e); range.moveEnd("character", t); range.select() } else if (textarea.setSelectionRange) { textarea.setSelectionRange(e, e + t) } textarea.scrollTop = scrollPosition; textarea.focus() } function get() { textarea.focus(); scrollPosition = textarea.scrollTop; if (document.selection) { selection = document.selection.createRange().text; if ($.browser.msie) { var e = document.selection.createRange(), t = e.duplicate(); t.moveToElementText(textarea); caretPosition = -1; while (t.inRange(e)) { t.moveStart("character"); caretPosition++ } } else { caretPosition = textarea.selectionStart } } else { caretPosition = textarea.selectionStart; selection = textarea.value.substring(caretPosition, textarea.selectionEnd) } return selection } function preview() { if (!previewWindow || previewWindow.closed) { if (options.previewInWindow) { previewWindow = window.open("", "preview", options.previewInWindow); $(window).unload(function () { previewWindow.close() }) } else { iFrame = $('<iframe class="markItUpPreviewFrame"></iframe>'); if (options.previewPosition == "after") { iFrame.insertAfter(footer) } else { iFrame.insertBefore(header) } previewWindow = iFrame[iFrame.length - 1].contentWindow || frame[iFrame.length - 1] } } else if (altKey === true) { if (iFrame) { iFrame.remove() } else { previewWindow.close() } previewWindow = iFrame = false } if (!options.previewAutoRefresh) { refreshPreview() } if (options.previewInWindow) { previewWindow.focus() } } function refreshPreview() { renderPreview() } function renderPreview() { var e; if (options.previewParser && typeof options.previewParser === "function") { var t = options.previewParser($$.val()); writeInPreview(localize(t, 1)) } else if (options.previewParserPath !== "") { var n = $$.val().replace(/'/gm, "&#39;"); $.ajax({ type: "POST", contentType: "application/json; charset=utf-8", dataType: "json", global: false, url: options.previewParserPath, data: "{'" + options.previewParserVar + "': '" + encodeURIComponent($$.val().replace(/'/gm, "&#39;")) + "'}", success: function (e) { writeInPreview(localize(e.d, 1)) }, error: function (e, t) { if (t == "timeout") { alert("The request timed out, please resubmit") } else { alert("ERROR: " + decodeURIComponent(e.responseText)) } } }) } else { if (!template) { $.ajax({ url: options.previewTemplatePath, dataType: "text", global: false, success: function (e) { writeInPreview(localize(e, 1).replace(/<!-- content -->/g, $$.val())) } }) } } return false } function writeInPreview(e) { if (previewWindow.document) { try { sp = previewWindow.document.documentElement.scrollTop } catch (t) { sp = 0 } previewWindow.document.open(); previewWindow.document.write(e); previewWindow.document.close(); previewWindow.document.documentElement.scrollTop = sp } } function keyPressed(e) { shiftKey = e.shiftKey; altKey = e.altKey; ctrlKey = !(e.altKey && e.ctrlKey) ? e.ctrlKey || e.metaKey : false; if (e.type === "keydown") { if (ctrlKey === true) { li = $('a[accesskey="' + String.fromCharCode(e.keyCode) + '"]', header).parent("li"); if (li.length !== 0) { ctrlKey = false; setTimeout(function () { li.triggerHandler("mouseup") }, 1); return false } } if (e.keyCode === 13 || e.keyCode === 10) { if (ctrlKey === true) { ctrlKey = false; markup(options.onCtrlEnter); return options.onCtrlEnter.keepDefault } else if (shiftKey === true) { shiftKey = false; markup(options.onShiftEnter); return options.onShiftEnter.keepDefault } else { markup(options.onEnter); return options.onEnter.keepDefault } } if (e.keyCode === 9) { if (shiftKey == true || ctrlKey == true || altKey == true) { return false } if (caretOffset !== -1) { get(); caretOffset = $$.val().length - caretOffset; set(caretOffset, 0); caretOffset = -1; return false } else { markup(options.onTab); return options.onTab.keepDefault } } } } var $$, textarea, levels, scrollPosition, caretPosition, caretOffset, clicked, hash, header, footer, previewWindow, template, iFrame, abort; $$ = $(this); textarea = this; levels = []; abort = false; scrollPosition = caretPosition = 0; caretOffset = -1; options.previewParserPath = localize(options.previewParserPath); options.previewTemplatePath = localize(options.previewTemplatePath); init() }) }; $.fn.markItUpRemove = function () { return this.each(function () { var e = $(this).unbind().removeClass("markItUpEditor"); e.parent("div").parent("div.markItUp").parent("div").replaceWith(e) }) }; $.markItUp = function (e) { var t = { target: false }; $.extend(t, e); if (t.target) { return $(t.target).each(function () { $(this).focus(); $(this).trigger("insertion", [t]) }) } else { $("textarea").trigger("insertion", [t]) } } })(jQuery); mySettings = { previewInWindow: "width=800,height=350,resizable=yes,scrollbars=yes", previewParserPath: "/Content/Forums/Post.aspx/ParseForumCode", previewTemplatePath: "~/templates/preview.html", markupSet: [{ name: "Size", key: "S", openWith: "[size=[![Text size]!]]", closeWith: "[/size]", dropMenu: [{ name: "Large", openWith: "[size=4]", closeWith: "[/size=4]" }, { name: "Small", openWith: "[size=3]", closeWith: "[/size=3]" }, { name: "x-Small", openWith: "[size=2]", closeWith: "[/size-2]" }] }, { name: "Bold", key: "B", openWith: "[b]", closeWith: "[/b]" }, { name: "Italic", key: "I", openWith: "[i]", closeWith: "[/i]" }, { name: "Underline", key: "U", openWith: "[u]", closeWith: "[/u]" }, { name: "StrikeThrough", key: "K", openWith: "[s]", closeWith: "[/s]" }, { name: "Colors", className: "colors", openWith: "[color=[![Color]!]]", closeWith: "[/color]", dropMenu: [{ name: "Yellow", openWith: "[yellow]", closeWith: "[/yellow]", className: "col1-1" }, { name: "Gold", openWith: "[gold]", closeWith: "[/gold]", className: "col1-2" }, { name: "Orange", openWith: "[orange]", closeWith: "[/orange]", className: "col1-3" }, { name: "Red", openWith: "[red]", closeWith: "[/red]", className: "col1-4" }, { name: "Purple", openWith: "[purple]", closeWith: "[/purple]", className: "col2-1" }, { name: "Green", openWith: "[green]", closeWith: "[/green]", className: "col2-2" }, { name: "White", openWith: "[white]", closeWith: "[/white]", className: "col2-3" }, { name: "Gray", openWith: "[gray]", closeWith: "[/gray]", className: "col2-4" }, { name: "Black", openWith: "[black]", closeWith: "[/black]", className: "col3-1" }, { name: "Navy", openWith: "[navy]", closeWith: "[/navy]", className: "col3-2" }, { name: "Blue", openWith: "[blue]", closeWith: "[/blue]", className: "col3-3" }, { name: "Pink", openWith: "[pink]", closeWith: "[/pink]", className: "col3-4" }] }, { separator: "---------------" }, { name: "Left", openWith: "[left]", closeWith: "[/left]" }, { name: "Center", openWith: "[center]", closeWith: "[/center]" }, { name: "Right", openWith: "[right]", closeWith: "[/right]" }, { name: "Direction", className: "textdir", openWith: "[(!(ltr|!|rtl)!)]", closeWith: "[/(!(ltr|!|rtl)!)]" }, { separator: "---------------" }, { name: "Bulleted list", openWith: "[*]", closeWith: "[/*]", multiline: true, openBlockWith: "[list]\n", closeBlockWith: "\n[/list]" }, { name: "Numeric list", openWith: "[*]", closeWith: "[/*]", multiline: true, openBlockWith: "[list=[![Type:!:1]!],[![Starting number]!]]\n", closeBlockWith: "\n[/list=o]" }, { name: "List item", openWith: "[*] ", closeWith: "[/*]" }, { separator: "---------------" }, { name: "Image tags", classname: "imagetag", key: "P", openWith: "(!([img]|!|[img][![Url:!:http://]!])!)", closeWith: "[/img]" }, { name: "Upload Image", className: "upload", call: "ShowUpload" }, { name: "Browse Images", className: "browse", call: "ShowImageBrowser" }, { name: "YouTube1", className: "youtube", openWith: '[video="[![YouTube video id]!]"]', closeWith: "[/video]", placeHolder: "Video Description" }, { separator: "---------------" }, { name: "Link", key: "L", openWith: '(!([url]|!|[url="[![Url:!:http://]!]"])!)', closeWith: "[/url]" }, { name: "Email", key: "E", openWith: '[mail="[![Email:!:mailto:]!]"]', closeWith: "[/mail]", placeHolder: "Text to display here..." }, { separator: "---------------" }, { name: "Quotes", openWith: "[quote]", closeWith: "[/quote]" }, { name: "Code", openWith: "", closeWith: "", multiline: true, openBlockWith: "[code]\n", closeBlockWith: "\n[/code]" }, { name: "Table", openWith: "[table]", closeWith: "[/table]", placeHolder: "[tr][(!(td|!|th)!)][/(!(td|!|th)!)][/tr]", dropMenu: [{ name: "Row", openWith: "[tr]", closeWith: "[/tr]", placeHolder: "[(!(td|!|th)!)][/(!(td|!|th)!)]" }, { name: "Column Td/Th", openWith: "[(!(td|!|th)!)]", closeWith: "[/(!(td|!|th)!)]" }] }, { separator: "---------------" }, { name: "Clean", className: "clean", replaceWith: function (e) { return e.selection.replace(/\[(.*?)\]/g, "") } }, { name: "Preview", className: "preview", call: "preview" }, { name: "Spellcheck", className: "spellcheck", dropMenu: [{ name: "English", beforeInsert: function (e) { miuSpellchecker(e, "en") } }, { name: "French", beforeInsert: function (e) { miuSpellchecker(e, "fr") } }, { name: "Dutch", beforeInsert: function (e) { miuSpellchecker(e, "nl") } }, { name: "German", beforeInsert: function (e) { miuSpellchecker(e, "de") } }] }] }